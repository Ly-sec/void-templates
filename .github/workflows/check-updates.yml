name: Check for Package Updates

on:
  schedule:
    - cron: '0 7 * * *'  # Daily at 8 AM German time (7 AM UTC in summer, 6 AM UTC in winter - using 7 AM UTC as compromise)
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests packaging

      - name: Check for updates and create PRs
        id: check
        run: |
          python3 << 'EOF'
          import os
          import re
          import requests
          import subprocess
          from packaging import version
          
          def extract_info_from_template(filepath):
              """Extract package info from void template"""
              with open(filepath, 'r') as f:
                  content = f.read()
              
              pkg_match = re.search(r'pkgname=(\S+)', content)
              ver_match = re.search(r'version=(\S+)', content)
              rev_match = re.search(r'revision=(\d+)', content)
              
              if not pkg_match or not ver_match:
                  return None
              
              # Try to find GitHub URL
              github_match = re.search(r'https://github\.com/([^/]+)/([^/\s"]+)', content)
              
              return {
                  'name': pkg_match.group(1),
                  'version': ver_match.group(1),
                  'revision': rev_match.group(1) if rev_match else '1',
                  'github': github_match.groups() if github_match else None,
                  'file': filepath,
                  'content': content
              }
          
          def get_latest_github_release(owner, repo):
              """Get latest release from GitHub"""
              try:
                  url = f'https://api.github.com/repos/{owner}/{repo}/releases/latest'
                  headers = {'Accept': 'application/vnd.github.v3+json'}
                  
                  token = os.environ.get('GITHUB_TOKEN')
                  if token:
                      headers['Authorization'] = f'token {token}'
                  
                  resp = requests.get(url, headers=headers, timeout=10)
                  if resp.status_code == 200:
                      data = resp.json()
                      tag = data['tag_name'].lstrip('v')
                      return tag, data['html_url']
              except Exception as e:
                  print(f"Error fetching {owner}/{repo}: {e}")
              return None, None
          
          def update_template(info, new_version):
              """Update template file with new version"""
              content = info['content']
              
              # Update version
              content = re.sub(
                  r'version=\S+',
                  f'version={new_version}',
                  content
              )
              
              # Reset revision to 1
              content = re.sub(
                  r'revision=\d+',
                  'revision=1',
                  content
              )
              
              # Write back
              with open(info['file'], 'w') as f:
                  f.write(content)
              
              return True
          
          def create_pr_for_update(pkg_name, old_ver, new_ver, release_url):
              """Create a branch and PR for the update"""
              branch_name = f'update-{pkg_name}-{new_ver}'
              
              # Create and checkout new branch
              subprocess.run(['git', 'checkout', '-b', branch_name], check=True)
              
              # Stage changes
              subprocess.run(['git', 'add', '.'], check=True)
              
              # Commit
              commit_msg = f'{pkg_name}: update to {new_ver}'
              subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
              
              # Push
              subprocess.run(['git', 'push', 'origin', branch_name], check=True)
              
              return branch_name
          
          # Configure git
          subprocess.run(['git', 'config', 'user.name', 'github-actions[bot]'], check=True)
          subprocess.run(['git', 'config', 'user.email', 'github-actions[bot]@users.noreply.github.com'], check=True)
          
          # Find all template files
          templates = []
          for root, dirs, files in os.walk('srcpkgs'):
              for file in files:
                  if file == 'template':
                      templates.append(os.path.join(root, file))
          
          updates = []
          
          for template_path in templates:
              info = extract_info_from_template(template_path)
              if not info or not info['github']:
                  continue
              
              owner, repo = info['github']
              latest_ver, release_url = get_latest_github_release(owner, repo)
              
              if latest_ver:
                  try:
                      current = version.parse(info['version'])
                      latest = version.parse(latest_ver)
                      
                      if latest > current:
                          print(f"Update available: {info['name']} {info['version']} → {latest_ver}")
                          
                          # Reset to main for each package
                          subprocess.run(['git', 'checkout', 'main'], check=True)
                          subprocess.run(['git', 'pull'], check=True)
                          
                          # Update the template
                          update_template(info, latest_ver)
                          
                          # Create PR
                          branch_name = create_pr_for_update(
                              info['name'], 
                              info['version'], 
                              latest_ver,
                              release_url
                          )
                          
                          updates.append({
                              'package': info['name'],
                              'old_version': info['version'],
                              'new_version': latest_ver,
                              'release_url': release_url,
                              'branch': branch_name
                          })
                          
                  except Exception as e:
                      print(f"Error processing {info['name']}: {e}")
                      # Reset on error
                      subprocess.run(['git', 'checkout', 'main'], check=False)
                      subprocess.run(['git', 'reset', '--hard'], check=False)
          
          # Write summary
          if updates:
              with open('pr_summary.txt', 'w') as f:
                  for update in updates:
                      f.write(f"{update['package']}|{update['old_version']}|{update['new_version']}|{update['release_url']}|{update['branch']}\n")
              
              print(f"Created {len(updates)} PR(s)")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"updates_found=true\n")
                  f.write(f"update_count={len(updates)}\n")
          else:
              print("No updates found")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"updates_found=false\n")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Requests
        if: steps.check.outputs.updates_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('pr_summary.txt')) {
              console.log('No PR summary found');
              return;
            }
            
            const summary = fs.readFileSync('pr_summary.txt', 'utf8');
            const updates = summary.trim().split('\n');
            
            for (const line of updates) {
              const [pkg, oldVer, newVer, releaseUrl, branch] = line.split('|');
              
              const title = `${pkg}: update to ${newVer}`;
              const body = `## Package Update
              
**Package:** ${pkg}
**Current Version:** ${oldVer}
**New Version:** ${newVer}
**Release:** ${releaseUrl}

---

This PR was automatically generated by the package update workflow.

Please review the changes and test before merging:
1. Check the changelog at the release URL above
2. Verify the checksum has been updated if necessary
3. Test build locally if possible

To update the checksum, run:
\`\`\`bash
xbps-src clean ${pkg}
xgensum -i srcpkgs/${pkg}/template
\`\`\``;
              
              try {
                await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  head: branch,
                  base: 'main'
                });
                console.log(`Created PR for ${pkg}`);
              } catch (error) {
                console.error(`Failed to create PR for ${pkg}:`, error.message);
              }
            }

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check.outputs.updates_found }}" == "true" ]; then
            echo "✅ Created ${{ steps.check.outputs.update_count }} PR(s) for package updates."
          else
            echo "✅ All packages are up to date!"
          fi