name: Check for Package Updates

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests packaging

      - name: Check for updates
        id: check
        run: |
          python3 << 'EOF'
          import os
          import re
          import requests
          from packaging import version
          
          def extract_info_from_template(filepath):
              """Extract package info from void template"""
              with open(filepath, 'r') as f:
                  content = f.read()
              
              pkg_match = re.search(r'pkgname=(\S+)', content)
              ver_match = re.search(r'version=(\S+)', content)
              
              if not pkg_match or not ver_match:
                  return None
              
              # Try to find GitHub URL
              github_match = re.search(r'https://github\.com/([^/]+)/([^/\s"]+)', content)
              
              return {
                  'name': pkg_match.group(1),
                  'version': ver_match.group(1),
                  'github': github_match.groups() if github_match else None,
                  'file': filepath
              }
          
          def get_latest_github_release(owner, repo):
              """Get latest release from GitHub"""
              try:
                  url = f'https://api.github.com/repos/{owner}/{repo}/releases/latest'
                  headers = {'Accept': 'application/vnd.github.v3+json'}
                  
                  # Use token if available
                  token = os.environ.get('GITHUB_TOKEN')
                  if token:
                      headers['Authorization'] = f'token {token}'
                  
                  resp = requests.get(url, headers=headers, timeout=10)
                  if resp.status_code == 200:
                      data = resp.json()
                      tag = data['tag_name'].lstrip('v')
                      return tag, data['html_url']
              except Exception as e:
                  print(f"Error fetching {owner}/{repo}: {e}")
              return None, None
          
          # Find all template files
          templates = []
          for root, dirs, files in os.walk('srcpkgs'):
              for file in files:
                  if file == 'template':
                      templates.append(os.path.join(root, file))
          
          updates_available = []
          
          for template_path in templates:
              info = extract_info_from_template(template_path)
              if not info or not info['github']:
                  continue
              
              owner, repo = info['github']
              latest_ver, release_url = get_latest_github_release(owner, repo)
              
              if latest_ver:
                  try:
                      current = version.parse(info['version'])
                      latest = version.parse(latest_ver)
                      
                      if latest > current:
                          updates_available.append({
                              'package': info['name'],
                              'current': info['version'],
                              'latest': latest_ver,
                              'url': release_url,
                              'file': template_path
                          })
                          print(f"Update available: {info['name']} {info['version']} → {latest_ver}")
                  except Exception as e:
                      print(f"Version comparison failed for {info['name']}: {e}")
          
          # Write results
          if updates_available:
              with open('updates.txt', 'w') as f:
                  for update in updates_available:
                      f.write(f"{update['package']}: {update['current']} → {update['latest']}\n")
                      f.write(f"  Release: {update['url']}\n")
                      f.write(f"  File: {update['file']}\n\n")
              
              print(f"Found {len(updates_available)} update(s)")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"updates_found=true\n")
                  f.write(f"update_count={len(updates_available)}\n")
          else:
              print("No updates found")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"updates_found=false\n")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Issue for Updates
        if: steps.check.outputs.updates_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const updates = fs.readFileSync('updates.txt', 'utf8');
            
            const title = `Package Updates Available (${new Date().toISOString().split('T')[0]})`;
            const body = `The following packages have new versions available:\n\n\`\`\`\n${updates}\n\`\`\`\n\nPlease review and update the templates accordingly.`;
            
            // Check if there's an open issue already
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['auto-update']
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['auto-update']
              });
            }

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check.outputs.updates_found }}" == "true" ]; then
            echo "Found ${{ steps.check.outputs.update_count }} update(s). Issue created/updated."
          else
            echo "All packages are up to date!"
          fi